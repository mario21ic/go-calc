pipeline {

  agent none

  options {
    ansiColor('xterm') // plugin
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'ENV', defaultValue: 'prod', description: 'Example dev, qa, etc')
    string(name: 'aws_credentials', defaultValue: 'aws-access', description: 'AWS credentials')
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Upload the Docker image')
  }

  environment {
    GOCACHE="/tmp/gocache"
    SLACK_MESSAGE = "Job '${env.JOB_NAME}' Build ${env.BUILD_NUMBER} URL ${env.BUILD_URL}"
  }

  stages {
    stage ('Repository') {
      steps {
        checkout scm
      }
    }

    stage("Deps") {
      agent {
        docker {
            image 'golang:1.17-alpine'
            //args '-v $HOME/.gocache:/tmp/gocache'
        }
      }
      steps {
        sh "go mod download"
      }
    }

    stage("Lint") {
      agent {
        docker {
            image 'golang:1.17-alpine'
        }
      }
      steps {
        sh "go vet ./"
      }
    }

    stage("Tests") {
      agent {
        docker {
            image 'golang:1.17-alpine'
        }
      }
      steps {
        sh "go test -v lib/math_test.go -coverpkg=./..."
      }
    }

    stage("Build") {
      agent {
        docker {
            image 'golang:1.17-alpine'
        }
      }
      steps {
        sh "CGO_ENABLED=0 go build -installsuffix 'static' -o ./build/go-calc main.go"
      }
    }

    stage("Docker") {
      agent any

      steps {
        echo "Building for Env ${params.ENV}"
        sh "hostname"
        sh "id"
        sh "pwd"
        sh "ls -la"
        sh "docker build -t mario21ic/go-calc:${env.BUILD_NUMBER} ."
      }
    }

    stage("Upload") {
      agent any
      when {
        expression {
          params.DEPLOY ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
          echo "TODO: add docker credentials"
          echo "docker login"
          sh "docker push mario21ic/go-calc:${env.BUILD_NUMBER}"
          echo "docker logout"
      }
    }

  }

  post {
    always {
      echo "Job has finished"
    }
  }
}
